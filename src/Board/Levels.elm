module Board.Levels exposing (..)

import Types exposing (Level)


(=>) : a -> b -> ( a, b )
(=>) =
    (,)



-- (0,3)             (2,3)
--   |                 |
-- (0,2) -- (1,2) -- (2,2) -- (3,2)
--   |        |        |        |
-- (0,1) -- (1,1)    (2,1) -- (3,1)
--            |                 |
-- (0,0) -- (1,0) -- (2,0) -- (3,0)


level0 : Level
level0 =
    { edges =
        [ ( 0, 0 ) => ( 1, 0 )
        , ( 0, 1 ) => ( 1, 1 )
        , ( 0, 1 ) => ( 0, 2 )
        , ( 0, 2 ) => ( 0, 3 )
        , ( 0, 2 ) => ( 1, 2 )
        , ( 1, 0 ) => ( 1, 1 )
        , ( 1, 0 ) => ( 2, 0 )
        , ( 1, 1 ) => ( 1, 2 )
        , ( 1, 2 ) => ( 2, 2 )
        , ( 2, 0 ) => ( 3, 0 )
        , ( 2, 1 ) => ( 2, 2 )
        , ( 2, 1 ) => ( 3, 1 )
        , ( 2, 2 ) => ( 2, 3 )
        , ( 2, 2 ) => ( 3, 2 )
        , ( 3, 0 ) => ( 3, 1 )
        , ( 3, 1 ) => ( 3, 2 )
        ]
    }



-- (0,7) -- (1,7) -- (2,7) -- (3,7) -- (4,7) -- (5,7) -- (6,7) -- (7,7)
--   |                                                              |
-- (0,6)                                                          (7,6)
--   |                                                              |
-- (0,5)                                                          (7,5)
--   |                                                              |
-- (0,4) -- (1,4)                                        (6,4) -- (7,4)
--            |                                            |
-- (0,3) -- (1,3)                                        (6,3) -- (7,3)
--   |                                                              |
-- (0,2)                                                          (7,2)
--   |                                                              |
-- (0,1)                                                          (7,1)
--   |                                                              |
-- (0,0) -- (1,0) -- (2,0) -- (3,0) -- (4,0) -- (5,0) -- (6,0) -- (7,0)


level1 : Level
level1 =
    { edges =
        [ ( 0, 0 ) => ( 0, 1 )
        , ( 0, 0 ) => ( 1, 0 )
        , ( 0, 1 ) => ( 0, 2 )
        , ( 0, 2 ) => ( 0, 3 )
        , ( 0, 3 ) => ( 1, 3 )
        , ( 0, 4 ) => ( 0, 5 )
        , ( 0, 4 ) => ( 1, 4 )
        , ( 0, 5 ) => ( 0, 6 )
        , ( 0, 6 ) => ( 0, 7 )
        , ( 0, 7 ) => ( 1, 7 )
        , ( 1, 0 ) => ( 2, 0 )
        , ( 1, 3 ) => ( 1, 4 )
        , ( 1, 7 ) => ( 2, 7 )
        , ( 2, 0 ) => ( 3, 0 )
        , ( 2, 7 ) => ( 3, 7 )
        , ( 3, 0 ) => ( 4, 0 )
        , ( 3, 7 ) => ( 4, 7 )
        , ( 4, 0 ) => ( 5, 0 )
        , ( 4, 7 ) => ( 5, 7 )
        , ( 5, 0 ) => ( 6, 0 )
        , ( 5, 7 ) => ( 6, 7 )
        , ( 6, 0 ) => ( 7, 0 )
        , ( 6, 3 ) => ( 6, 4 )
        , ( 6, 3 ) => ( 7, 3 )
        , ( 6, 4 ) => ( 7, 4 )
        , ( 6, 7 ) => ( 7, 7 )
        , ( 7, 0 ) => ( 7, 1 )
        , ( 7, 1 ) => ( 7, 2 )
        , ( 7, 2 ) => ( 7, 3 )
        , ( 7, 4 ) => ( 7, 5 )
        , ( 7, 5 ) => ( 7, 6 )
        , ( 7, 6 ) => ( 7, 7 )
        ]
    }
